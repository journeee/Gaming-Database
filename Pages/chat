im going to provide code files and i want you to make changes to it that will allow the use a cloud firesrote database and to perform the following use cases: 
 The Admin Deactivates/Activates a User 

A Regular User registers for an an Account

A Regular User Follows a Content Creator

A Content Creator Registers for an Account

A Content Creator Uploads Game-Related Content

A Moderator Registers for an Account
The Admin signs into the app using the sign in Screen

The Admin searches/browses/lists all the users.

A Regular User signs into the app

A Regular User searches/browses/lists Game specific information.

A Content Moderator signs into the app 

A Moderator Flags/Removes Inappropriate Content

*Included previous html and js code

Responses:
To implement the required functionality using Firebase Firestore and address your use cases, I will suggest the following updates to your code. These updates will include:

1. **Firebase Firestore Integration**: You'll be shifting from Firebase Realtime Database (`firebase-database.js`) to Firestore (`firebase-firestore.js`) for better scalability and querying capabilities.

2. **Role-Based Features**: We will include features like user activation/deactivation, user role assignment, and content management for different user roles such as Admin, Content Creator, Regular User, and Moderator.

### Steps:

1. **Switch to Firestore for Database Storage**: Replace Firebase Realtime Database with Firestore for better querying and document management.

2. **Add Admin Role Functions**: Allow admins to deactivate/activate users.

3. **Content Creator and Moderator Actions**: Allow content creators to upload content and moderators to flag/remove inappropriate content.

### Updated Firebase Setup (Firestore Integration):

#### Update the Firebase Imports:

```javascript
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.0.2/firebase-app.js';
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/9.0.2/firebase-auth.js';
import { getFirestore, collection, addDoc, setDoc, doc, getDoc, query, where, get, updateDoc } from 'https://www.gstatic.com/firebasejs/9.0.2/firebase-firestore.js';
```

#### Initialize Firestore:

```javascript
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
```

---

### Use Cases Implementation:

#### **1. Admin Deactivates/Activates a User**

You can allow the Admin to update a userâ€™s `status` (active/inactive) in Firestore. For example, an Admin can deactivate a user by setting their `active` status to `false`.

```javascript
// Admin deactivates/activates a user
function toggleUserStatus(userId, isActive) {
    const userRef = doc(db, 'users', userId);
    updateDoc(userRef, {
        active: isActive
    })
    .then(() => {
        console.log(`User ${userId} status updated to ${isActive ? 'active' : 'inactive'}`);
    })
    .catch((error) => {
        console.error('Error updating user status: ', error);
    });
}
```

#### **2. A Regular User Registers for an Account**

In this case, you are already saving the user's role when they register. You can add more fields like `isActive: true` to track if the user is active.

```javascript
createUserWithEmailAndPassword(auth, email, password)
    .then((userCredential) => {
        const user = userCredential.user;
        return setDoc(doc(db, 'users', user.uid), {
            username: username,
            email: email,
            role: role,
            active: true // Add active status
        });
    })
    .then(() => {
        // Redirect based on role
        redirectToDashboard(user.uid);
    })
    .catch((error) => {
        console.error('Error creating user: ', error);
    });
```



function checkUserStatus(userId) {
    const userRef = doc(db, 'users', userId);
    getDoc(userRef)
        .then((docSnap) => {
            if (docSnap.exists()) {
                const userData = docSnap.data();
                if (userData.active) {
                    redirectToDashboard(userId);
                } else {
                    console.error('Your account is inactive. Please contact an Admin.');
                }
            } else {
                console.error('No such user!');
            }
        })
        .catch((error) => {
            console.error('Error checking user status: ', error);
        });
}
```

#### **4. A Content Creator Uploads Game-Related Content**

A Content Creator can upload content to Firestore, including metadata such as content type, title, description, and tags.

```javascript
function uploadContent(contentData) {
    const contentRef = collection(db, 'content');
    addDoc(contentRef, contentData)
        .then((docRef) => {
            console.log('Content uploaded with ID: ', docRef.id);
        })
        .catch((error) => {
            console.error('Error uploading content: ', error);
        });
}
```

#### **5. A Moderator Flags/Removes Inappropriate Content**

A Moderator can flag content by updating a field in the content document, for example, `isFlagged: true`.

```javascript
function flagContent(contentId) {
    const contentRef = doc(db, 'content', contentId);
    updateDoc(contentRef, {
        isFlagged: true
    })
    .then(() => {
        console.log(`Content ${contentId} has been flagged.`);
    })
    .catch((error) => {
        console.error('Error flagging content: ', error);
    });
}
```

#### **6. Search/Browse/List Users and Content**

You can use Firestore queries to list users or content based on specific criteria, such as `role` for users or `isFlagged` for content.

```javascript
// Search for all content uploaded by a Content Creator
function listContent() {
    const contentRef = collection(db, 'content');
    const q = query(contentRef, where('isFlagged', '==', false)); // List non-flagged content
    get(q)
        .then((querySnapshot) => {
            querySnapshot.forEach((doc) => {
                console.log(doc.id, " => ", doc.data());
            });
        })
        .catch((error) => {
            console.error('Error listing content: ', error);
        });
}
```

---

### Final Thoughts:
- **Firestore** provides a more scalable way to manage users and content.
- We can store additional fields (like `active`, `isFlagged`) to manage user and content states.
- You can extend the roles and functionalities by adding more Firestore fields and updating your UI accordingly.
- Ensure proper security rules in Firestore to manage permissions based on roles (Admin, Moderator, Content Creator, Regular User).

Would you like me to assist you with any specific part of the integration or help you write more detailed code for each use case?